{"version":3,"sources":["utils/isAxiosError.ts","utils/generateNewRoomsProps.ts","components/SplashScreen.tsx","components/CreatorOptions.tsx","utils/socketFunctions.ts","utils/personalVoteBackground.ts","components/FeedbackMessage.tsx","components/FeedbackGrid.tsx","components/ChatBoard.tsx","utils/dowloadFeedback.ts","utils/messageValidator.ts","components/Error404Page.tsx","components/RouteValidator.tsx","utils/validateQueryParams.ts","App.tsx","index.tsx"],"names":["isAxiosError","error","undefined","generateNewRoomProps","currentRoomsArray","newRoomId","Math","random","toString","split","indexOf","generateNewId","search","roomCreator","SplashScreen","props","useState","roomId","setRoomId","redirect","setRedirect","useEffect","location","state","alert","message","createRoom","a","axios","get","currentRooms","data","newRoomProps","console","log","joinRoom","params","boardId","response","status","to","pathname","fromRedirect","className","onClick","htmlFor","id","name","value","onChange","e","target","placeholder","CreatorOptions","socket","emit","personalVoteBackground","personalVote","FeedbackMessage","voteMessage","hideVotes","style","alignSelf","color","upvotes","FeedbackGrid","messageList","votedMessages","map","indexOfVoted","findIndex","msg","messageId","personalVotes","ChatBoard","didCreate","setMessageList","setMessage","setSocket","warning","setWarning","setHideVotes","setVotedMessages","on","newVoteVis","socketOnVoteVis","socketOnMessageList","errorMessage","socketOnError","setTimeout","close","timeout","socketOnCreatorDC","io","connect","query","disconnect","csvContent","keys","Object","forEach","key","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","getElementById","remove","downloadFeedback","votedMessage","newVotedMessage","abs","newVotedMessageArray","filter","socketEmitUpvote","length","err","includes","messageValidator","newMessage","user","socketEmitNewMessage","handleClick","Error404Page","href","RouteValidator","renderChatBoard","setRenderChatBoard","redirectProps","setRedirectProps","queryParam","test","qs","parse","board","validBoard","asyncUseEffect","App","exact","path","component","ReactDOM","render"],"mappings":"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","file":"static/js/main.d841fd97.chunk.js","sourcesContent":["import { AxiosError } from \"axios\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/explicit-module-boundary-types\r\nexport const isAxiosError = (error: any): error is AxiosError => {\r\n    return (error as AxiosError).isAxiosError !== undefined;\r\n};\r\n\r\n// Function to check if something fits the AxiosError interface\r\n// Will return the error as instanceof AxiosError is .isAxiosError property\r\n// exists on the error object (will be undefined if not an AxiosError)\r\n","import { NewRoomProps } from \"types\";\r\n\r\nconst generateNewId = (currentRoomsArray: string[]) => {\r\n    let newRoomId = (Math.random()*1000000).toString().split(\".\")[0];\r\n    while (currentRoomsArray.indexOf(newRoomId) !== -1){\r\n        newRoomId = (Math.random()*1000000).toString().split(\".\")[0];\r\n    }\r\n    return newRoomId;\r\n};\r\n\r\nexport const generateNewRoomProps = (currentRoomsArray: string[]): NewRoomProps => {\r\n    const newRoomId = generateNewId(currentRoomsArray);\r\n    const newRoomProps: NewRoomProps = {search: `?board=${newRoomId}`, roomCreator: true };\r\n    return newRoomProps;\r\n};","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { StaticContext } from \"react-router\";\r\nimport { Redirect, RouteComponentProps } from \"react-router-dom\";\r\n\r\nimport { NewRoomProps, SplashScreenLocationState } from \"types\";\r\nimport { isAxiosError } from \"src/utils/isAxiosError\";\r\nimport { generateNewRoomProps } from \"src/utils/generateNewRoomsProps\";\r\n\r\n// eslint disable here as RouteComponentProps needs an 'any' as first argument\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst SplashScreen:\r\nReact.FC<RouteComponentProps<any, StaticContext, SplashScreenLocationState>>\r\n= (props: RouteComponentProps<any, StaticContext, SplashScreenLocationState>): JSX.Element => {\r\n    const [roomId, setRoomId] = useState<string>(\"\");\r\n    const [redirect, setRedirect] = useState<NewRoomProps>();\r\n\r\n    // If redirected here and have a message to be displayed e.g when room closes will be redirected here with a message in the\r\n    // props.location.state\r\n    useEffect(() => {\r\n        if (props.location.state !== undefined){\r\n            alert(props.location.state.message);\r\n        }\r\n    }, []);\r\n\r\n\r\n    const createRoom = async () => {\r\n        try {\r\n            // Makes sure not to duplicate rooms if 1/1,000,000 chance happens\r\n            const { data: currentRooms } = await axios.get(\"/api/current-rooms\");\r\n            const newRoomProps = generateNewRoomProps(currentRooms as string[]);\r\n            setRedirect(newRoomProps);\r\n        } catch (err: unknown) {\r\n            console.log(err);\r\n        }\r\n    };\r\n\r\n    const joinRoom = async () => {\r\n        if (roomId === \"\"){\r\n            alert(\"Room ID empty\");\r\n            return;\r\n        }\r\n        try {\r\n            // Will error if not valid room (axios will return error 400 which counts as error)\r\n            await axios.get(\"/api/valid-room\", {params: {boardId: roomId}});\r\n            setRedirect({search: `?board=${roomId}`, roomCreator: false});\r\n\r\n        } catch (err: unknown) {\r\n            if (isAxiosError(err)) {\r\n                if (err.response?.status === 400){\r\n                    alert(err.response.data.message + ` (${roomId})`);\r\n                    \r\n                } else {\r\n                    alert(\"Something went wrong.\");\r\n                }\r\n            } else {\r\n                alert(\"Something went wrong.\");\r\n            }\r\n            setRoomId(\"\");\r\n        }\r\n    };\r\n\r\n    // Redirects to the feedback board passing in the appropriate props to props.location.state\r\n    if (redirect !== undefined){\r\n        return (\r\n            <Redirect to={{\r\n                pathname: \"/board\",\r\n                search: redirect.search,\r\n                state: { roomCreator: redirect.roomCreator, fromRedirect: true }\r\n            }} />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"SplashScreen-main-div\">\r\n\r\n            <h1>Anonymous Feedback</h1>\r\n            <button onClick={() => createRoom()}>Create a room</button>\r\n\r\n            <h3>OR</h3>\r\n\r\n            <div className=\"SplashScreen-join-room\">\r\n                <label htmlFor=\"room-id\">RoomID:</label>\r\n                <input id=\"room-id\" name=\"room-id\"\r\n                    value={roomId} onChange={(e: React.ChangeEvent<HTMLInputElement>) => setRoomId(e.target.value)} \r\n                    placeholder=\"Enter Room ID\" />\r\n                <button onClick={() => joinRoom()}>Join an existing room using Room ID</button>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SplashScreen;","import React from \"react\";\r\nimport { socketEmitVoteVis } from \"src/utils/socketFunctions\";\r\n\r\nimport { CreatorOptionsProps } from \"types\";\r\n\r\nconst CreatorOptions: React.FC<CreatorOptionsProps> = (props: CreatorOptionsProps): JSX.Element => {\r\n    \r\n    const toggleHideVotes = () => {\r\n        socketEmitVoteVis(props.socket);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={() => toggleHideVotes()}>Toggle Vote Visibility</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CreatorOptions;","import { Message } from \"types\";\r\n\r\n// Listeners\r\nexport const socketOnMessageList\r\n= (socket: SocketIOClient.Socket, setMessageList: (messageList: Message[]) => void): void => {\r\n    socket.on(\"message\", (messageList: Message[]) => {\r\n        setMessageList(messageList);\r\n    });\r\n};\r\n\r\nexport const socketOnError\r\n= (socket: SocketIOClient.Socket): void => {\r\n    socket.on(\"error\", (errorMessage: string) => {\r\n        alert(`Error: ${errorMessage}`);\r\n    });\r\n};\r\n\r\nexport const socketOnVoteVis\r\n= (socket: SocketIOClient.Socket, setHideVotes: (hideVotes: boolean) => void): void => {\r\n    socket.on(\"toggle-votes\", (newVoteVis: boolean) => {\r\n        console.log(\"TOGGLEED VOTES\");\r\n        setHideVotes(newVoteVis);\r\n    });\r\n};\r\n\r\nexport const socketOnCreatorDC\r\n= (socket: SocketIOClient.Socket, setWarning:(str: string) => void, setRedirect: (str: string) => void): void => {\r\n    socket.on(\"creator-disconnect\", (message: {msg: string, timeout: number}) => {\r\n        setWarning(message.msg);\r\n        setTimeout(() => {\r\n            socket.close();\r\n            setWarning(\"\");\r\n            setRedirect(\"/\");\r\n        }, message.timeout);\r\n    });\r\n};\r\n\r\n// Emits\r\nexport const socketEmitNewMessage = (socket: SocketIOClient.Socket, message: string): void => {\r\n    const user: string = socket.id;\r\n    const newMessage = {user, message, upvotes: 0};\r\n    socket.emit(\"message\", newMessage);\r\n};\r\n\r\nexport const socketEmitUpvote = (socket: SocketIOClient.Socket, message: Message, value: number): void => {\r\n    socket.emit(\"upvote\", {message, value});\r\n};\r\n\r\nexport const socketEmitVoteVis = (socket: SocketIOClient.Socket): void => {\r\n    socket.emit(\"toggle-votes\");\r\n};","export const personalVoteBackground = (personalVote: number): string => {\r\n    switch (personalVote){\r\n    case 3:\r\n        return \"strong-agree\";\r\n    case 2:\r\n        return \"agree\";\r\n    case 1:\r\n        return \"partial-agree\";\r\n    case 0:\r\n        return \"neutral\";\r\n    case -1:\r\n        return \"partial-disagree\";\r\n    case -2:\r\n        return \"disagree\";\r\n    case -3:\r\n        return \"strong-disagree\";\r\n    default:\r\n        return \"\";\r\n    }\r\n};","import React from \"react\";\r\nimport { personalVoteBackground } from \"src/utils/personalVoteBackground\";\r\n\r\nimport { FeedbackMessageProps } from \"types\";\r\n\r\nconst FeedbackMessage:\r\nReact.FC<FeedbackMessageProps>\r\n= ({message, personalVote, voteMessage, hideVotes}: FeedbackMessageProps) => {\r\n    return (\r\n        <div className=\"FeedbackMessage-main-div\">\r\n            <div className={`FeedbackMessage-personal-vote ${personalVoteBackground(personalVote)}`}>\r\n                <strong>{personalVote}</strong>\r\n            </div>\r\n\r\n            <div className=\"FeedbackMessage-info\">\r\n                <div style={{alignSelf: \"flex-end\"}}>\r\n                    <button className=\"FeedbackMessage-downvote-button\" onClick={() => voteMessage(message, -1)}>D</button>\r\n                    <button style={{color: \"black\"}} className=\"FeedbackMessage-upvote-button\"  onClick={() => voteMessage(message, 1)}>U</button>\r\n                </div>\r\n                <p>{message.message} </p>\r\n                <p> <strong>Total Votes: {!hideVotes ? message.upvotes : <i style={{color: \"grey\"}}>hidden by room owner</i>} </strong></p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FeedbackMessage;","import React from \"react\";\r\nimport { FeedbackGridProps } from \"types\";\r\nimport FeedbackMessage from \"./FeedbackMessage\";\r\n\r\nconst FeedbackGrid: React.FC<FeedbackGridProps> = ({messageList, votedMessages, hideVotes, voteMessage}: FeedbackGridProps): JSX.Element => {\r\n\r\n    const renderList = () : JSX.Element[] => {\r\n        return messageList.map((message) => {\r\n            const indexOfVoted = votedMessages.findIndex(msg => msg.messageId === message.id);\r\n            const personalVote = indexOfVoted === -1 ? 0 : votedMessages[indexOfVoted].personalVotes;\r\n            return (\r\n                <FeedbackMessage key={message.id} hideVotes={hideVotes} voteMessage={voteMessage} message={message} personalVote={personalVote} />\r\n            );\r\n        });\r\n    };\r\n    return <>{renderList()}</>;\r\n};\r\n\r\nexport default FeedbackGrid;","import React, { useState, useEffect } from \"react\";\r\nimport { Redirect } from \"react-router\";\r\nimport io from \"socket.io-client\";\r\n\r\nimport { downloadFeedback } from \"../utils/dowloadFeedback\";\r\nimport { ChatBoardProps, Message, PersonalVotedMessage } from \"types\";\r\nimport CreatorOptions from \"./CreatorOptions\";\r\nimport {\r\n    socketEmitNewMessage,\r\n    socketEmitUpvote,\r\n    socketOnCreatorDC,\r\n    socketOnError,\r\n    socketOnMessageList,\r\n    socketOnVoteVis\r\n} from \"src/utils/socketFunctions\";\r\nimport { messageValidator } from \"src/utils/messageValidator\";\r\nimport FeedbackGrid from \"./FeedbackGrid\";\r\n\r\n// Outside main App so doesn't create a new socket on every \r\n// component re-render.\r\nconst ENDPOINT = process.env.NODE_ENV === \"production\" ?\r\n    \"https://feedback-dysiewicz.herokuapp.com\" :\r\n    \"localhost:5000\";\r\nconst NUM_VOTES = 3;\r\n\r\nconst ChatBoard:\r\nReact.FC<ChatBoardProps>\r\n= ({boardId, didCreate}: ChatBoardProps): JSX.Element => {\r\n\r\n    // Stateful vars\r\n    const [messageList, setMessageList] = useState<Message[]>([]);\r\n    const [message, setMessage] = useState<string>(\"\");\r\n    const [socket, setSocket] = useState<SocketIOClient.Socket>();\r\n    const [redirect, setRedirect] = useState<string>(\"\");\r\n    const [warning, setWarning] = useState<string>();\r\n    const [hideVotes, setHideVotes] = useState<boolean>(true);\r\n    const [votedMessages, setVotedMessages] = useState<PersonalVotedMessage[]>([]);\r\n\r\n    // Set up socket connection and listeners\r\n    useEffect(() => {\r\n        if (!socket){\r\n            setSocket(io.connect(ENDPOINT, {query: `board=${boardId}`}));\r\n        } else {\r\n            socketOnVoteVis(socket, setHideVotes);\r\n            socketOnMessageList(socket, setMessageList);\r\n            socketOnError(socket);\r\n            socketOnCreatorDC(socket, setWarning, setRedirect);\r\n        }\r\n        \r\n        return () => {\r\n            if (socket) socket.disconnect();\r\n        };\r\n    }, [socket]);\r\n\r\n    // Return loading spinner if waiting on socket, or redirect if disconnected\r\n    if (!socket) return <div></div>;\r\n    if (redirect) return <Redirect to={{pathname: \"/\", state: {message: \"Disconnected due to admin inactivity\"}}} />;\r\n    \r\n    // Could factor this out, but needs access to many vars/methods described here. Would have to pass them all in\r\n    // feels like if I have to pass in like 7 arguments then maybe it should stay here?\r\n    const voteMessage = (message: Message, value: number) => {\r\n        const indexOfVoted = votedMessages.findIndex(msg => msg.messageId === message.id);\r\n        // If not in votedMessages array, add it to it and give it a personal vote of +1/-1\r\n        // Else, update its votes\r\n        if (indexOfVoted === -1){\r\n            setVotedMessages([...votedMessages, {messageId: message.id, personalVotes: value}]);\r\n        } else {\r\n            const votedMessage = votedMessages[indexOfVoted];\r\n            const newVotedMessage = {...votedMessage, personalVotes: votedMessage.personalVotes + value};\r\n            if (Math.abs(newVotedMessage.personalVotes) > NUM_VOTES) return alert(\"Can only vote 3 times per item\");\r\n            const newVotedMessageArray = votedMessages.filter(msg => msg.messageId !== message.id);\r\n            setVotedMessages([...newVotedMessageArray, newVotedMessage]);\r\n        }\r\n        socketEmitUpvote(socket, message, value);\r\n    };\r\n\r\n    const handleClick = (): void => {\r\n        const err: string | null = messageValidator(message);\r\n        if (err) {\r\n            alert(err);\r\n            return;\r\n        }\r\n        socketEmitNewMessage(socket, message);\r\n        setMessage(\"\");\r\n    };\r\n\r\n    return(\r\n        <div className=\"ChatBoard-main-div\">\r\n            <div className=\"ChatBoard-header-content\">\r\n                <div className=\"ChatBoard-info\">\r\n                    <div>\r\n                        <h1>Anonymous Feedback: RoomID - {boardId}</h1>\r\n                    </div>\r\n                </div>\r\n                <div className=\"ChatBoard-temp\">\r\n                    {didCreate && <CreatorOptions socket={socket} boardId={boardId} />}\r\n                </div>\r\n                <button className=\"ChatBoard-download\" onClick={() => downloadFeedback(messageList)}>Download Feedback</button>\r\n                {warning && <h3 style={{color: \"red\"}}>{warning}</h3>}\r\n            </div>\r\n            <div className=\"ChatBoard-feedback-list\">\r\n                <div className=\"ChatBoard-feedback-grid\">\r\n                    <FeedbackGrid messageList={messageList} votedMessages={votedMessages} hideVotes={hideVotes} voteMessage={voteMessage} />\r\n                </div>\r\n            </div>\r\n            <div className=\"ChatBoard-write-message\">\r\n                <label htmlFor=\"write-message\">Write a Message: <small>{message.length}/150</small></label>\r\n                <textarea id=\"write-message\" name=\"write-message\" value={message} onChange={(e) => setMessage(e.target.value)} />\r\n                <button id=\"submit-message\" name=\"submit-message\" onClick={() => handleClick()}>Submit Message</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatBoard;","import { Message } from \"../../types\";\r\n\r\nexport const downloadFeedback = (messageList: Message[]): void => {\r\n\r\n    // Takes the messageList from the persons client side, iterates over it and assigns each key in the messageList\r\n    // a column. Then iterates over each message and builds the csv file content.\r\n\r\n    let csvContent = \"data:text/csv;charset=utf-8,\"; // Stack overflow\r\n    const keys = Object.keys(messageList[0]);\r\n    keys.forEach(key => csvContent += `${key},`);\r\n    csvContent += \"\\n\";\r\n    messageList.forEach(message => {\r\n        keys.forEach(key => {\r\n            csvContent += `${message[key]},`;\r\n        });\r\n        csvContent += \"\\n\";\r\n    });\r\n\r\n    const encodedUri = encodeURI(csvContent);\r\n    \r\n    // Need hidden <a> to download as a CSV - perhaps a more React way of doing this as making HTML elements this way is kinda bad\r\n    const link = document.createElement(\"a\");\r\n    link.setAttribute(\"href\", encodedUri);\r\n    link.setAttribute(\"download\", \"feedback.csv\");\r\n    link.setAttribute(\"id\", \"feedback-download-temp\");\r\n    document.body.appendChild(link);\r\n\r\n    // Downloads the file, and removes the created a tag afterwards.\r\n    link.click();\r\n    document.getElementById(\"feedback-download-temp\")?.remove();\r\n    return;\r\n\r\n};","// Add as much validation here as needed for messages. Will return null if all checks pass, else returns a string to be displayed as \r\n// an alert error.\r\n\r\nexport const messageValidator = (message: string): string | null => {\r\n    if (message.length === 0) return \"Message cannot be empty\";\r\n    if (message.includes(\"\\n\")) return \"New line characters are not permitted\";\r\n    if (message.length > 150) return \"Maximum character limit of 300\";\r\n    return null;\r\n};","import React from \"react\";\r\n\r\nconst Error404Page: React.FC = (): JSX.Element => {\r\n    return (\r\n        <div className=\"Error404Page-main-div\">\r\n            <h1>Error: 404</h1>\r\n            <p>Sorry, we couldnt find the page you were looking for. Please double check that the room ID is correct.</p>\r\n            <a href=\"/\">Click here to go to the main screen</a>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Error404Page;","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport qs from \"query-string\";\r\nimport { RouteComponentProps, StaticContext } from \"react-router\";\r\n\r\nimport { isAxiosError } from \"src/utils/isAxiosError\";\r\nimport ChatBoard from \"./ChatBoard\";\r\nimport Error404Page from \"./Error404Page\";\r\nimport { RouteValidatorLocationState } from \"types\";\r\nimport { validateQueryParams } from \"src/utils/validateQueryParams\";\r\n\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst RouteValidator:\r\nReact.FC<RouteComponentProps<any, StaticContext, RouteValidatorLocationState>>\r\n= (props: RouteComponentProps<any, StaticContext, RouteValidatorLocationState>): JSX.Element => {\r\n    \r\n    const [renderChatBoard, setRenderChatBoard] = useState<null | boolean>(null);\r\n    const [redirectProps, setRedirectProps] = useState<{boardId: string, didCreate: boolean}>({boardId: \"\", didCreate: false});\r\n\r\n    useEffect(() => {\r\n\r\n        // No async useEffect yet so have to define function inside and then run it.\r\n        const asyncUseEffect = async () => {\r\n            const validQueryParams = validateQueryParams(props.location.search);\r\n            if (!validQueryParams) {\r\n                setRenderChatBoard(false);\r\n                return;\r\n            }\r\n\r\n            // Will have a .board if this passes\r\n            const boardId = qs.parse(props.location.search).board as string;\r\n\r\n            // If here from a redirect, then set props for ChatBoard - all good. \r\n            if (props.location.state){\r\n                setRedirectProps({boardId, didCreate: props.location.state.roomCreator});\r\n                setRenderChatBoard(true);\r\n                return;\r\n            }\r\n    \r\n            // If here from a URL link, need to validate that they are attempting to join an existing room, not create their own\r\n            let validBoard;\r\n            try {\r\n                const axiosResponse = await axios.get(\"/api/valid-room\", { params: {boardId} });\r\n                if (axiosResponse.status === 200) validBoard = true;\r\n            } catch (err: unknown) {\r\n                if (isAxiosError(err)) {\r\n                    if (err.response?.status === 400){\r\n                        // No room exists by that ID\r\n                        alert(err.response.data.message + ` (${boardId})`);\r\n                        \r\n                    } else {\r\n                        // Catch-all\r\n                        alert(\"Something went wrong.\");\r\n                    }\r\n                } else {\r\n                    // Catch-all\r\n                    alert(\"Something went wrong.\");\r\n                }\r\n\r\n                // If catching an error at all, don't display the ChatBoard.\r\n                setRenderChatBoard(false);\r\n                return;\r\n            }\r\n\r\n            // If they attempted to create a new board via url, prevent it.\r\n            if (validBoard !== true){\r\n                setRenderChatBoard(false);\r\n                return;\r\n            }\r\n            \r\n            // If all checks out, they must be attempting to join a room that exists\r\n            setRedirectProps({boardId, didCreate: false});\r\n            setRenderChatBoard(true);\r\n        };\r\n\r\n        // No top level useEffect async yet....\r\n        asyncUseEffect();\r\n    }, []);\r\n    \r\n\r\n    if (renderChatBoard === null) return <div></div>; // Return loading spinner in future\r\n    else if (renderChatBoard === false) return <Error404Page />; // Error 404 page with link to home\r\n    else return <ChatBoard {...redirectProps} />; // All good, render ChatBoard, passing in props\r\n};\r\n\r\nexport default RouteValidator;","export const validateQueryParams = (queryParam: string) => {\r\n    const regexToCheckBoard = /^\\?board=[0-9]*$/; // checks for '?board=123...32' as the query param\r\n    return  regexToCheckBoard.test(queryParam) ? true : false;\r\n};","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nimport SplashScreen from \"./components/SplashScreen\";\r\nimport RouteValidator from \"./components/RouteValidator\";\r\n\r\nimport \"./styles/index.scss\";\r\nimport Error404Page from \"./components/Error404Page\";\r\n\r\n// Entry point for the client-side. Will display a component based on the path provided\r\nconst App: React.FC = () => {\r\n\r\n    return (\r\n        <div className=\"App-main-div\">\r\n            <Router>\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={SplashScreen} />\r\n                    <Route path=\"/board\" component={RouteValidator} />\r\n                    <Error404Page />\r\n                </Switch>\r\n            </Router>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById(\"root\")\r\n);"],"sourceRoot":""}