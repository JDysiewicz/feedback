{"version":3,"sources":["components/SplashScreen.tsx","components/CreatorOptions.tsx","components/FeedbackMessage.tsx","components/ChatBoard.tsx","utils/dowloadFeedback.ts","App.tsx","index.tsx"],"names":["SplashScreen","props","useState","roomId","setRoomId","redirect","setRedirect","useEffect","undefined","location","state","alert","message","joinRoom","a","axios","get","params","boardId","console","log","search","roomCreator","response","data","to","pathname","className","onClick","newRoomId","Math","random","toString","split","newRoomProps","createRoom","htmlFor","id","name","value","onChange","e","target","placeholder","CreatorOptions","toggleHideVotes","FeedbackMessage","personalVote","voteMessage","hideVotes","style","backgroundColor","color","upvotes","ChatBoard","messageList","setMessageList","setMessage","setBoardId","socket","setSocket","didCreateRoom","setDidCreateRoom","warning","setWarning","setHideVotes","votedMessages","setVotedMessages","didCreate","newBoardId","qs","parse","board","io","connect","query","disconnect","on","voteVis","msg","setTimeout","close","timeout","indexOfVoted","findIndex","messageId","personalVotes","votedMessage","newVotedMessage","abs","newVotedMessageArray","filter","emit","csvContent","keys","Object","forEach","key","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","getElementById","remove","downloadFeedback","map","length","includes","newMessage","user","handleClick","App","exact","path","component","ReactDOM","render"],"mappings":"sOAmEeA,EA7DoF,SAACC,GAA4F,IAAD,EAC/JC,mBAAiB,IAD8I,mBACpLC,EADoL,KAC5KC,EAD4K,OAE3JF,qBAF2J,mBAEpLG,EAFoL,KAE1KC,EAF0K,KAI3LC,qBAAU,gBACuBC,IAAzBP,EAAMQ,SAASC,OACfC,MAAMV,EAAMQ,SAASC,MAAME,WAEhC,IAIH,IAMMC,EAAQ,uCAAG,sBAAAC,EAAA,yDACE,KAAXX,EADS,uBAETQ,MAAM,iBAFG,mDAOkBI,IAAMC,IAAI,kBAAmB,CAACC,OAAQ,CAACC,QAASf,KAPlE,0DAQiBgB,QAAQC,IAAI,0BAR7B,OAUTd,EAAY,CAACe,OAAO,UAAD,OAAYlB,GAAUmB,aAAa,IAV7C,kDAYTX,MAAM,UAAD,OAAW,KAAIY,SAASC,KAAKZ,UAClCR,EAAU,IAbD,4FAAH,qDAmBd,YAAiBI,IAAbH,EAEI,cAAC,IAAD,CAAUoB,GAAI,CACVC,SAAU,SACVL,OAAQhB,EAASgB,OACjBX,MAAO,CAAEY,YAAajB,EAASiB,gBAMvC,sBAAKK,UAAU,wBAAf,UACI,oDACA,wBAAQC,QAAS,kBAtCN,WACf,IAAMC,GAA2B,IAAdC,KAAKC,UAAkBC,WAAWC,MAAM,KAAK,GAC1DC,EAA6B,CAACb,OAAO,UAAD,OAAYQ,GAAaP,aAAa,GAChFhB,EAAY4B,GAmCeC,IAAvB,2BACA,oCACA,sBAAKR,UAAU,yBAAf,UACI,uBAAOS,QAAQ,UAAf,qBACA,uBAAOC,GAAG,UAAUC,KAAK,UAAUC,MAAOpC,EAAQqC,SAAU,SAACC,GAAD,OAA4CrC,EAAUqC,EAAEC,OAAOH,QAAQI,YAAY,kBAC/I,wBAAQf,QAAS,kBAAMf,KAAvB,wD,kDCjDD+B,EATuC,SAAC3C,GACnD,OACI,8BACI,wBAAQ2B,QAAS,kBAAM3B,EAAM4C,mBAA7B,uCCqBGC,EAhByC,SAAC,GAA2E,IAA1ElC,EAAyE,EAAzEA,QAASmC,EAAgE,EAAhEA,aAAcC,EAAkD,EAAlDA,YAAaC,EAAqC,EAArCA,UAC1F,OACI,sBAAKtB,UAAU,2BAAf,UACI,8BAAIf,EAAQA,QAAZ,OACA,sBAAKe,UAAU,iCAAf,UACI,wBAAQuB,MAAO,CAACC,gBAAiB,SAAUvB,QAAS,kBAAMoB,EAAYpC,EAAS,IAA/E,oBACA,wBAAQgB,QAAS,kBAAMoB,EAAYpC,GAAU,IAA7C,yBAEJ,sBAAKe,UAAU,wBAAf,UACI,gDAAmBoB,EAAnB,OACA,kCAAI,mDAAuBE,EAA8B,mBAAGC,MAAO,CAACE,MAAO,QAAlB,kCAAlBxC,EAAQyC,QAA3C,iBCgILC,EApI8E,SAACrD,GAG1F,GAA8B,KAA1BA,EAAMQ,SAASY,OAAe,OAAO,+DAHyI,MAK5InB,mBAAoB,IALwH,mBAK3KqD,EAL2K,KAK9JC,EAL8J,OAMpJtD,mBAAiB,IANmI,mBAM3KU,EAN2K,KAMlK6C,EANkK,OAOpJvD,mBAAiB,IAPmI,mBAO3KgB,EAP2K,KAOlKwC,EAPkK,OAQtJxD,qBARsJ,mBAQ3KyD,EAR2K,KAQnKC,EARmK,OASxI1D,oBAAkB,GATsH,mBAS3K2D,EAT2K,KAS5JC,EAT4J,OAUlJ5D,mBAAiB,IAViI,mBAU3KG,EAV2K,KAUjKC,EAViK,OAWpJJ,qBAXoJ,mBAW3K6D,EAX2K,KAWlKC,EAXkK,OAYhJ9D,oBAAkB,GAZ8H,mBAY3K+C,EAZ2K,KAYhKgB,EAZgK,OAaxI/D,mBAAiC,IAbuG,mBAa3KgE,EAb2K,KAa5JC,EAb4J,KAiClL,GAlBA5D,qBAAU,WAEN,GAA8B,KAA1BN,EAAMQ,SAASY,OAAnB,CAGA,QAA6Bb,IAAzBP,EAAMQ,SAASC,MAAoB,CACnC,IAAM0D,EAAYnE,EAAMQ,SAASC,MAAMY,YACvCwC,EAAiBM,GAErB,IAAMC,EAAaC,IAAGC,MAAMtE,EAAMQ,SAASY,QAAQmD,MAInD,OAHAd,EAAWW,GACXT,EAAUa,IAAGC,QA/BjB,2CA+BmC,CAACC,MAAM,SAAD,OAAWN,MAEzC,WACCV,GAAQA,EAAOiB,iBAExB,KAEEjB,EAAQ,OAAO,wBAGpBA,EAAOkB,GAAG,WAAW,SAACtB,GAClBC,EAAeD,MAGnBI,EAAOkB,GAAG,2BAA2B,SAACC,GAClC3D,QAAQC,IAAI,WAAY0D,GACxBb,EAAaa,MAGjBnB,EAAOkB,GAAG,sBAAsB,SAACjE,GAC7BoD,EAAWpD,EAAQmE,KACnBC,YAAW,WACPrB,EAAOsB,QACPjB,EAAW,IACX1D,EAAY,OACbM,EAAQsE,YAIf,IAAMlC,EAAc,SAACpC,EAAkB2B,GACnC,IAAM4C,EAAejB,EAAckB,WAAU,SAAAL,GAAG,OAAIA,EAAIM,YAAczE,EAAQyB,MAG9E,IAAsB,IAAlB8C,EACAhB,EAAiB,GAAD,mBAAKD,GAAL,CAAoB,CAACmB,UAAWzE,EAAQyB,GAAIiD,cAAe/C,UACxE,CACH,IAAMgD,EAAerB,EAAciB,GAC7BK,EAAe,2BAAOD,GAAP,IAAqBD,cAAeC,EAAaD,cAAgB/C,IACtF,GAAIT,KAAK2D,IAAID,EAAgBF,eAlEvB,EAkEmD,OAAO3E,MAAM,kCACtE,IAAM+E,EAAuBxB,EAAcyB,QAAO,SAAAZ,GAAG,OAAIA,EAAIM,YAAczE,EAAQyB,MACnF8B,EAAiB,GAAD,mBAAKuB,GAAL,CAA2BF,KAE/C7B,EAAOiC,KAAK,SAAU,CAAChF,UAAS2B,WAiBpCoB,EAAOkB,GAAG,gBAAgB,WACtBZ,GAAchB,MAalB,OAAI5C,EAAiB,cAAC,IAAD,CAAUoB,GAAI,CAACC,SAAU,IAAKhB,MAAO,CAACE,QAAS,2CAGhE,sBAAKe,UAAU,qBAAf,UACI,sBAAKA,UAAU,2BAAf,UACI,qBAAKA,UAAU,iBAAf,SACI,gCACI,oDACA,0CAAaT,UAGrB,qBAAKS,UAAU,iBAAf,SACKkC,GAAiB,cAAC,EAAD,CAAgBF,OAAQA,EAAQzC,QAASA,EAAS2B,gBA9B5D,WACpBc,EAAOiC,KAAK,qBA+BJ,wBAAQjE,UAAU,qBAAqBC,QAAS,kBChIhC,SAAC2B,GAAkC,IAAD,EAC1DsC,EAAa,+BACXC,EAAOC,OAAOD,KAAKvC,EAAY,IACrCuC,EAAKE,SAAQ,SAAAC,GAAG,OAAIJ,GAAU,UAAOI,EAAP,QAC9BJ,GAAc,KACdtC,EAAYyC,SAAQ,SAAApF,GAChBkF,EAAKE,SAAQ,SAAAC,GACTJ,GAAU,UAAOjF,EAAQqF,GAAf,QAEdJ,GAAc,QAGlB,IAAMK,EAAaC,UAAUN,GAGvBO,EAAOC,SAASC,cAAc,KACpCF,EAAKG,aAAa,OAAQL,GAC1BE,EAAKG,aAAa,WAAY,gBAC9BH,EAAKG,aAAa,KAAM,0BACxBF,SAASG,KAAKC,YAAYL,GAG1BA,EAAKM,QACL,UAAAL,SAASM,eAAe,iCAAxB,SAAmDC,SDyGeC,CAAiBtD,IAAvE,+BACCQ,GAAW,oBAAIb,MAAO,CAACE,MAAO,OAAnB,SAA4BW,OAE5C,qBAAKpC,UAAU,0BAAf,SACI,qBAAKA,UAAU,0BAAf,SA7CD4B,EAAYuD,KAAI,SAAClG,GACpB,IAAMuE,EAAejB,EAAckB,WAAU,SAAAL,GAAG,OAAIA,EAAIM,YAAczE,EAAQyB,MACxEU,GAAiC,IAAlBoC,EAAsB,EAAIjB,EAAciB,GAAcG,cAC3E,OACI,cAAC,EAAD,CAAkCrC,UAAWA,EAAWD,YAAaA,EAAapC,QAASA,EAASmC,aAAcA,GAA5FnC,EAAQyB,WA8ClC,sBAAKV,UAAU,0BAAf,UACI,uBAAOS,QAAQ,gBAAf,+BACA,0BAAUC,GAAG,gBAAgBC,KAAK,gBAAgBC,MAAO3B,EAAS+B,YAAY,kBAAkBH,SAAU,SAACC,GAAD,OAAOgB,EAAWhB,EAAEC,OAAOH,UAErI,wBAAQF,GAAG,iBAAiBC,KAAK,iBAAiBV,QAAS,kBArCnD,WAChB,GAAuB,IAAnBhB,EAAQmG,OAAc,OAAOpG,MAAM,2BACvC,GAAIC,EAAQoG,SAAS,MAAO,OAAOrG,MAAM,yCACzC,IACMsG,EAAa,CAACC,KADCvD,EAAOtB,GACFzB,UAASyC,QAAS,GAC5CM,EAAOiC,KAAK,UAAWqB,GACvBxD,EAAW,IA+B8D0D,IAAjE,mCExHDC,G,OAdO,WAElB,OACI,qBAAKzF,UAAU,eAAf,SACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAO0F,OAAK,EAACC,KAAK,IAAIC,UAAWvH,IACjC,cAAC,IAAD,CAAOsH,KAAK,SAASC,UAAWjE,aCXpDkE,IAASC,OACL,cAAC,EAAD,IACApB,SAASM,eAAe,W","file":"static/js/main.b10bef8b.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { StaticContext } from \"react-router\";\r\nimport { Redirect, RouteComponentProps } from \"react-router-dom\";\r\nimport { NewRoomProps, SplashScreenLocationState } from \"../../types\";\r\n\r\nconst SplashScreen: React.FC<RouteComponentProps<any, StaticContext, SplashScreenLocationState>> = (props: RouteComponentProps<any, StaticContext, SplashScreenLocationState>): JSX.Element => {\r\n    const [roomId, setRoomId] = useState<string>(\"\");\r\n    const [redirect, setRedirect] = useState<NewRoomProps>();\r\n\r\n    useEffect(() => {\r\n        if (props.location.state !== undefined){\r\n            alert(props.location.state.message);\r\n        }\r\n    }, []);\r\n\r\n    // Right now, no checking for if roomId exists - just relying on that 1/million chance of two rooms simultaneously\r\n    // existing :/\r\n    const createRoom = () => {\r\n        const newRoomId = (Math.random()*1000000).toString().split(\".\")[0];\r\n        const newRoomProps: NewRoomProps = {search: `?board=${newRoomId}`, roomCreator: true };\r\n        setRedirect(newRoomProps);\r\n    };\r\n\r\n    const joinRoom = async () => {\r\n        if (roomId === \"\"){\r\n            alert(\"Room ID empty\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const existingRoom = await axios.get(\"/api/valid-room\", {params: {boardId: roomId}});\r\n            if (!existingRoom) return console.log(\"No room by that name!\");\r\n            // Check whether rooms exists via express route and axios later\r\n            setRedirect({search: `?board=${roomId}`, roomCreator: false});\r\n        } catch (err: any) {\r\n            alert(`ERROR: ${err.response.data.message}`);\r\n            setRoomId(\"\");\r\n        }\r\n        return;\r\n    };\r\n\r\n    // Redirects to the feedback board passing in the appropriate props to props.location.state\r\n    if (redirect !== undefined){\r\n        return (\r\n            <Redirect to={{\r\n                pathname: \"/board\",\r\n                search: redirect.search,\r\n                state: { roomCreator: redirect.roomCreator }\r\n            }} />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"SplashScreen-main-div\">\r\n            <h1>Anonymous Feedback</h1>\r\n            <button onClick={() => createRoom()}>Create a room</button>\r\n            <h3>OR</h3>\r\n            <div className=\"SplashScreen-join-room\">\r\n                <label htmlFor=\"room-id\">RoomID:</label>\r\n                <input id=\"room-id\" name=\"room-id\" value={roomId} onChange={(e: React.ChangeEvent<HTMLInputElement>) => setRoomId(e.target.value)} placeholder=\"Enter Room ID\" />\r\n                <button onClick={() => joinRoom()}>Join an existing room using Room ID</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SplashScreen;","import React from \"react\";\r\nimport { CreatorOptionsProps } from \"../../types\";\r\n\r\nconst CreatorOptions: React.FC<CreatorOptionsProps> = (props: CreatorOptionsProps): JSX.Element => {\r\n    return (\r\n        <div>\r\n            <button onClick={() => props.toggleHideVotes()}>Toggle Vote Visibility</button>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default CreatorOptions;","import React from \"react\";\r\n\r\nimport { Message } from \"../../types\";\r\n\r\ninterface FeedbackMessageProps {\r\n    message: Message;\r\n    personalVote: number;\r\n    voteMessage: (message: Message, value: number) => void;\r\n    hideVotes: boolean;\r\n}\r\n\r\nconst FeedbackMessage: React.FC<FeedbackMessageProps> = ({message, personalVote, voteMessage, hideVotes}: FeedbackMessageProps) => {\r\n    return (\r\n        <div className=\"FeedbackMessage-main-div\">\r\n            <p>{message.message} </p>\r\n            <div className=\"FeedbackMessage-voting-buttons\">\r\n                <button style={{backgroundColor: \"green\"}} onClick={() => voteMessage(message, 1)}>Upvote</button>\r\n                <button onClick={() => voteMessage(message, -1)}>Downvote</button>\r\n            </div>\r\n            <div className=\"FeedbackMessage-votes\">\r\n                <p>Personal Vote: {personalVote} </p>\r\n                <p> <strong>Total Votes: {!hideVotes ? message.upvotes : <i style={{color: \"grey\"}}>hidden by room owner</i>} </strong></p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FeedbackMessage;","import React, { useState, useEffect } from \"react\";\r\nimport qs from \"query-string\";\r\nimport io from \"socket.io-client\";\r\nimport { downloadFeedback } from \"../utils/dowloadFeedback\";\r\nimport { Message, ChatBoardLocationState, PersonalVotedMessage } from \"../../types\";\r\nimport { Redirect, RouteComponentProps, StaticContext } from \"react-router\";\r\nimport CreatorOptions from \"./CreatorOptions\";\r\nimport FeedbackMessage from \"./FeedbackMessage\";\r\n// Outside main App so doesn't create a new socket on every \r\n// component re-render.\r\n// const ENDPOINT = process.env.ENDPOINT || \"localhost:5000\";\r\nconst ENDPOINT = process.env.NODE_ENV === \"production\" ?\r\n    \"https://feedback-dysiewicz.herokuapp.com\" :\r\n    \"localhost:5000\";\r\n\r\nconst NUM_VOTES = 3;\r\n\r\nconst ChatBoard: React.FC<RouteComponentProps<any, StaticContext, ChatBoardLocationState>> = (props: RouteComponentProps<any, StaticContext, ChatBoardLocationState>): JSX.Element => {\r\n\r\n    // Return nothing if not redirected here\r\n    if (props.location.search === \"\") return <div>Please create or join a room</div>;\r\n\r\n    const [messageList, setMessageList] = useState<Message[]>([]);\r\n    const [message, setMessage] = useState<string>(\"\");\r\n    const [boardId, setBoardId] = useState<string>(\"\");\r\n    const [socket, setSocket] = useState<SocketIOClient.Socket>();\r\n    const [didCreateRoom, setDidCreateRoom] = useState<boolean>(false);\r\n    const [redirect, setRedirect] = useState<string>(\"\");\r\n    const [warning, setWarning] = useState<string>();\r\n    const [hideVotes, setHideVotes] = useState<boolean>(true);\r\n    const [votedMessages, setVotedMessages] = useState<PersonalVotedMessage[]>([]);\r\n\r\n    useEffect(() => {\r\n        // Don't run if there's no search param for the board - here as a safety net from above\r\n        if (props.location.search === \"\") return;\r\n\r\n        // If here from the Redirect or not\r\n        if (props.location.state !== undefined){\r\n            const didCreate = props.location.state.roomCreator;\r\n            setDidCreateRoom(didCreate);\r\n        }\r\n        const newBoardId = qs.parse(props.location.search).board as string;\r\n        setBoardId(newBoardId);\r\n        setSocket(io.connect(ENDPOINT, {query: `board=${newBoardId}`}));\r\n\r\n        return () => {\r\n            if (socket) socket.disconnect();\r\n        };\r\n    }, []);\r\n\r\n    if (!socket) return <div></div>;\r\n\r\n\r\n    socket.on(\"message\", (messageList: Message[]) => {\r\n        setMessageList(messageList);\r\n    });\r\n\r\n    socket.on(\"initial-vote-visibility\", (voteVis: boolean) => {\r\n        console.log(\"VOTE VIS\", voteVis);\r\n        setHideVotes(voteVis);\r\n    });\r\n\r\n    socket.on(\"creator-disconnect\", (message: {msg: string, timeout: number}) => {\r\n        setWarning(message.msg);\r\n        setTimeout(() => {\r\n            socket.close();\r\n            setWarning(\"\");\r\n            setRedirect(\"/\");\r\n        }, message.timeout);\r\n        return;\r\n    });\r\n\r\n    const voteMessage = (message: Message, value: number) => {\r\n        const indexOfVoted = votedMessages.findIndex(msg => msg.messageId === message.id);\r\n        // If not in votedMessages array, add it to it and give it a personal vote of +1/-1\r\n        // Else, update its votes\r\n        if (indexOfVoted === -1){\r\n            setVotedMessages([...votedMessages, {messageId: message.id, personalVotes: value}]);\r\n        } else {\r\n            const votedMessage = votedMessages[indexOfVoted];\r\n            const newVotedMessage = {...votedMessage, personalVotes: votedMessage.personalVotes + value};\r\n            if (Math.abs(newVotedMessage.personalVotes) > NUM_VOTES) return alert(\"Can only vote 3 times per item\");\r\n            const newVotedMessageArray = votedMessages.filter(msg => msg.messageId !== message.id);\r\n            setVotedMessages([...newVotedMessageArray, newVotedMessage]);\r\n        }\r\n        socket.emit(\"upvote\", {message, value});\r\n    };\r\n\r\n    const renderList = () : JSX.Element[] => {\r\n        return messageList.map((message: Message) => {\r\n            const indexOfVoted = votedMessages.findIndex(msg => msg.messageId === message.id);\r\n            const personalVote = indexOfVoted === -1 ? 0 : votedMessages[indexOfVoted].personalVotes;\r\n            return (\r\n                <FeedbackMessage key={message.id} hideVotes={hideVotes} voteMessage={voteMessage} message={message} personalVote={personalVote} />\r\n            );\r\n        });\r\n    };\r\n\r\n    const toggleHideVotes = () => {\r\n        socket.emit(\"toggle-votes\");\r\n    };\r\n\r\n    socket.on(\"toggle-votes\", () => {\r\n        setHideVotes(!hideVotes);\r\n    });\r\n\r\n    const handleClick = (): void => {\r\n        if (message.length === 0) return alert(\"Message cannot be empty\");\r\n        if (message.includes(\"\\n\")) return alert(\"New line characters are not permitted\");\r\n        const user: string = socket.id;\r\n        const newMessage = {user, message, upvotes: 0};\r\n        socket.emit(\"message\", newMessage);\r\n        setMessage(\"\");\r\n        return; \r\n    };\r\n\r\n    if (redirect) return <Redirect to={{pathname: \"/\", state: {message: \"Disconnected due to admin inactivity\"}}} />;\r\n\r\n    return(\r\n        <div className=\"ChatBoard-main-div\">\r\n            <div className=\"ChatBoard-header-content\">\r\n                <div className=\"ChatBoard-info\">\r\n                    <div>\r\n                        <h1>Anonymous Feedback</h1>\r\n                        <h3>RoomID: {boardId}</h3>\r\n                    </div>\r\n                </div>\r\n                <div className=\"ChatBoard-temp\">\r\n                    {didCreateRoom && <CreatorOptions socket={socket} boardId={boardId} toggleHideVotes={toggleHideVotes}/>}\r\n                </div>\r\n                <button className=\"ChatBoard-download\" onClick={() => downloadFeedback(messageList)}>Download Feedback</button>\r\n                {warning && <h3 style={{color: \"red\"}}>{warning}</h3>}\r\n            </div>\r\n            <div className=\"ChatBoard-feedback-list\">\r\n                <div className=\"ChatBoard-feedback-grid\">\r\n                    {renderList()}\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"ChatBoard-write-message\">\r\n                <label htmlFor=\"write-message\">Write a Message: </label>\r\n                <textarea id=\"write-message\" name=\"write-message\" value={message} placeholder=\"Write a message\" onChange={(e) => setMessage(e.target.value)} />\r\n                \r\n                <button id=\"submit-message\" name=\"submit-message\" onClick={() => handleClick()}>Submit Message</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatBoard;","import { Message } from \"../../types\";\r\n\r\nexport const downloadFeedback = (messageList: Message[]): void => {\r\n    let csvContent = \"data:text/csv;charset=utf-8,\";\r\n    const keys = Object.keys(messageList[0]);\r\n    keys.forEach(key => csvContent += `${key},`);\r\n    csvContent += \"\\n\";\r\n    messageList.forEach(message => {\r\n        keys.forEach(key => {\r\n            csvContent += `${message[key]},`;\r\n        });\r\n        csvContent += \"\\n\";\r\n    });\r\n\r\n    const encodedUri = encodeURI(csvContent);\r\n    \r\n    // Need hidden <a> to download as a CSV - perhaps a more React way of doing this\r\n    const link = document.createElement(\"a\");\r\n    link.setAttribute(\"href\", encodedUri);\r\n    link.setAttribute(\"download\", \"feedback.csv\");\r\n    link.setAttribute(\"id\", \"feedback-download-temp\");\r\n    document.body.appendChild(link);\r\n\r\n    // Downloads the file and removes the node afterwards\r\n    link.click();\r\n    document.getElementById(\"feedback-download-temp\")?.remove();\r\n    return;\r\n\r\n};","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n// import ChatBoard from \"./components/ChatBoard\";\r\n\r\nimport SplashScreen from \"./components/SplashScreen\";\r\nimport ChatBoard from \"./components/ChatBoard\";\r\n\r\nimport \"./styles/index.scss\";\r\n\r\nconst App: React.FC = () => {\r\n\r\n    return (\r\n        <div className=\"App-main-div\">\r\n            <Router>\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={SplashScreen} />\r\n                    <Route path=\"/board\" component={ChatBoard} />\r\n                </Switch>\r\n            </Router>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById(\"root\")\r\n);"],"sourceRoot":""}