{"version":3,"sources":["components/SplashScreen.tsx","components/ChatBoard.tsx","utils/dowloadFeedback.ts","App.tsx","index.tsx"],"names":["SplashScreen","useState","roomId","setRoomId","redirect","setRedirect","length","to","onClick","tempRoomId","Math","random","toString","tempLink","createRoom","value","onChange","e","target","placeholder","console","log","ChatBoard","window","location","search","messageList","setMessageList","message","setMessage","boardId","setBoardId","socket","setSocket","useEffect","newBoardId","qs","parse","board","io","connect","query","disconnect","on","upvoteMessage","emit","map","style","display","upvotes","csvContent","keys","Object","forEach","key","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","getElementById","remove","downloadFeedback","newMessage","user","id","handleClick","App","exact","path","component","ReactDOM","render"],"mappings":"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","file":"static/js/main.c69469bd.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\n// import ChatBoard from \"./components/ChatBoard\";\r\n\r\nconst SplashScreen: React.FC = (): JSX.Element => {\r\n\r\n    const [roomId, setRoomId] = useState<string>(\"\");\r\n    const [redirect, setRedirect] = useState<string>(\"\");\r\n\r\n    const createRoom = () => {\r\n        const tempRoomId = Math.random().toString();\r\n        const tempLink = `/board?board=${tempRoomId}`;\r\n        setRedirect(tempLink);\r\n    };\r\n\r\n    const joinRoom = () => {\r\n        if (roomId === \"\"){\r\n            console.log(\"Room ID empty\");\r\n            return;\r\n        }\r\n        // Check whether rooms exists via express route and axios later\r\n        setRedirect(`/board?board=${roomId}`);\r\n    };\r\n\r\n    if (redirect.length !== 0) return <Redirect to={redirect} />;\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={() => createRoom()}>Create a room</button>\r\n            <input value={roomId} onChange={(e: React.ChangeEvent<HTMLInputElement>) => setRoomId(e.target.value)} placeholder=\"Room ID\" />\r\n            <button onClick={() => joinRoom()}>Join an existing room using Room ID</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SplashScreen;","import React, { useState, useEffect } from \"react\";\r\nimport qs from \"query-string\";\r\nimport io from \"socket.io-client\";\r\nimport { downloadFeedback } from \"../utils/dowloadFeedback\";\r\nimport { Message } from \"../../types\";\r\n\r\n// Outside main App so doesn't create a new socket on every \r\n// component re-render.\r\n// const ENDPOINT = process.env.ENDPOINT || \"localhost:5000\";\r\nconst ENDPOINT = process.env.NODE_ENV === \"production\" ?\r\n    \"https://feedback-dysiewicz.herokuapp.com\" :\r\n    \"localhost:5000\";\r\n\r\nconst ChatBoard: React.FC = (): JSX.Element => {\r\n\r\n    if (window.location.search === \"\") return <div></div>;\r\n\r\n    const [messageList, setMessageList] = useState<Message[]>([]);\r\n    const [message, setMessage] = useState<string>(\"\");\r\n    // const [title, setTitle] = useState<string>(\"Feedback Board\");\r\n\r\n    const [boardId, setBoardId] = useState<string>(\"\");\r\n    const [socket, setSocket] = useState<SocketIOClient.Socket>();\r\n\r\n    useEffect(() => {\r\n        if (window.location.search === \"\") return;\r\n        const newBoardId = qs.parse(window.location.search).board as string;\r\n        setBoardId(newBoardId);\r\n        setSocket(io.connect(ENDPOINT, {query: `board=${newBoardId}`}));\r\n\r\n        return () => {\r\n            if (socket) socket.disconnect();\r\n        };\r\n    }, []);\r\n\r\n    if (!socket) return <div></div>;\r\n\r\n\r\n    socket.on(\"message\", (messageList: Message[]) => {\r\n        setMessageList(messageList);\r\n    });\r\n\r\n    const upvoteMessage = (message: Message, value: number) => {\r\n        socket.emit(\"upvote\", {message, value});\r\n    };\r\n\r\n    const renderList = () : JSX.Element[] => {\r\n        return messageList.map((message: Message) => {\r\n            return (\r\n                <li key={message.message}>\r\n                    <div style={{display: \"flex\"}}>\r\n                        <p>Message: {message.message}, Upvotes: {message.upvotes}</p>\r\n                        <button onClick={() => upvoteMessage(message, 1)}>Upvote</button>\r\n                        <button onClick={() => upvoteMessage(message, -1)}>Downvote</button>\r\n                    </div>\r\n                </li>\r\n            );\r\n        });\r\n    };\r\n\r\n    const handleClick = (): void => {\r\n        const user: string = socket.id;\r\n        const newMessage: Message = {user, message, upvotes: 0};\r\n        socket.emit(\"message\", newMessage);\r\n        setMessage(\"\");\r\n        return;\r\n    };\r\n\r\n    return(\r\n        <div>\r\n            {/* <input style={{border: \"none\", fontSize: \"3rem\"}}\r\n                value={title} onChange={(e) => setTitle(e.target.value)} /> */}\r\n            <h1>Anonymous Feedback</h1>\r\n            <h2>RoomID: {boardId}</h2>\r\n            <ul>\r\n                {renderList()}\r\n            </ul>\r\n            <button onClick={() => downloadFeedback(messageList)}>Download Feedback</button>\r\n            <input value={message} placeholder=\"Write a message\" onChange={(e) => setMessage(e.target.value)} />\r\n            <button onClick={() => handleClick()}>Submit Message</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatBoard;","import { Message } from \"../../types\";\r\n\r\nexport const downloadFeedback = (messageList: Message[]): void => {\r\n    let csvContent = \"data:text/csv;charset=utf-8,\";\r\n    const keys = Object.keys(messageList[0]);\r\n    keys.forEach(key => csvContent += `${key},`);\r\n    csvContent += \"\\n\";\r\n    messageList.forEach(message => {\r\n        keys.forEach(key => {\r\n            csvContent += `${message[key]},`;\r\n        });\r\n        csvContent += \"\\n\";\r\n    });\r\n\r\n    const encodedUri = encodeURI(csvContent);\r\n    \r\n    // Need hidden <a> to download as a CSV - perhaps a more React way of doing this\r\n    const link = document.createElement(\"a\");\r\n    link.setAttribute(\"href\", encodedUri);\r\n    link.setAttribute(\"download\", \"feedback.csv\");\r\n    link.setAttribute(\"id\", \"feedback-download-temp\");\r\n    document.body.appendChild(link);\r\n\r\n    // Downloads the file and removes the node afterwards\r\n    link.click();\r\n    document.getElementById(\"feedback-download-temp\")?.remove();\r\n    return;\r\n\r\n};","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n// import ChatBoard from \"./components/ChatBoard\";\r\n\r\nimport SplashScreen from \"./components/SplashScreen\";\r\nimport ChatBoard from \"./components/ChatBoard\";\r\n\r\nconst App: React.FC = () => {\r\n\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <Route exact path=\"/\" component={SplashScreen} />\r\n                <Route path=\"/board\" component={ChatBoard} />\r\n            </Switch>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById(\"root\")\r\n);"],"sourceRoot":""}