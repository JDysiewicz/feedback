{"version":3,"sources":["components/SplashScreen.tsx","components/CreatorOptions.tsx","components/ChatBoard.tsx","utils/dowloadFeedback.ts","App.tsx","index.tsx"],"names":["SplashScreen","props","useState","roomId","setRoomId","redirect","setRedirect","useEffect","undefined","location","state","alert","message","to","pathname","search","roomCreator","onClick","newRoomId","Math","random","toString","split","newRoomProps","createRoom","value","onChange","e","target","placeholder","console","log","CreatorOptions","toggleHideVotes","ChatBoard","messageList","setMessageList","setMessage","boardId","setBoardId","socket","setSocket","didCreateRoom","setDidCreateRoom","warning","setWarning","hideVotes","setHideVotes","votedMessages","setVotedMessages","didCreate","newBoardId","qs","parse","board","io","connect","query","disconnect","on","voteVis","msg","setTimeout","close","timeout","voteMessage","indexOfVoted","findIndex","messageId","id","personalVotes","votedMessage","newVotedMessage","abs","newVotedMessageArray","filter","emit","style","color","map","personalVote","display","upvotes","csvContent","keys","Object","forEach","key","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","getElementById","remove","downloadFeedback","newMessage","user","handleClick","App","exact","path","component","ReactDOM","render"],"mappings":"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","file":"static/js/main.858d9855.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { StaticContext } from \"react-router\";\r\nimport { Redirect, RouteComponentProps } from \"react-router-dom\";\r\n\r\n// import ChatBoard from \"./components/ChatBoard\";\r\n\r\ninterface NewRoomProps{\r\n    search: string;\r\n    roomCreator: boolean;\r\n}\r\n\r\ninterface SplashScreenLocationState{\r\n    message: string;\r\n}\r\n\r\nconst SplashScreen: React.FC<RouteComponentProps<any, StaticContext, SplashScreenLocationState>> = (props: RouteComponentProps<any, StaticContext, SplashScreenLocationState>): JSX.Element => {\r\n    const [roomId, setRoomId] = useState<string>(\"\");\r\n    const [redirect, setRedirect] = useState<NewRoomProps>();\r\n\r\n    useEffect(() => {\r\n        if (props.location.state !== undefined){\r\n            alert(props.location.state.message);\r\n        }\r\n    }, []);\r\n\r\n    // Right now, no checking for if roomId exists - just relying on that 1/million chance of two rooms simultaneously\r\n    // existing :/\r\n    const createRoom = () => {\r\n        const newRoomId = (Math.random()*1000000).toString().split(\".\")[0];\r\n        const newRoomProps: NewRoomProps = {search: `?board=${newRoomId}`, roomCreator: true };\r\n        setRedirect(newRoomProps);\r\n    };\r\n\r\n    const joinRoom = () => {\r\n        if (roomId === \"\"){\r\n            console.log(\"Room ID empty\");\r\n            return;\r\n        }\r\n        // Check whether rooms exists via express route and axios later\r\n        setRedirect({search: `?board=${roomId}`, roomCreator: false});\r\n    };\r\n\r\n    // Redirects to the feedback board passing in the appropriate props to props.location.state\r\n    if (redirect !== undefined){\r\n        return (\r\n            <Redirect to={{\r\n                pathname: \"/board\",\r\n                search: redirect.search,\r\n                state: { roomCreator: redirect.roomCreator }\r\n            }} />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={() => createRoom()}>Create a room</button>\r\n            <input value={roomId} onChange={(e: React.ChangeEvent<HTMLInputElement>) => setRoomId(e.target.value)} placeholder=\"Room ID\" />\r\n            <button onClick={() => joinRoom()}>Join an existing room using Room ID</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SplashScreen;","import React from \"react\";\r\n\r\ninterface CreatorOptionsProps {\r\n    socket: SocketIOClient.Socket;\r\n    boardId: string;\r\n    toggleHideVotes: () => void;\r\n}\r\n\r\nconst CreatorOptions: React.FC<CreatorOptionsProps> = (props: CreatorOptionsProps): JSX.Element => {\r\n    return (\r\n        <div>\r\n            <button onClick={() => props.toggleHideVotes()}>Toggle Vote Visibility</button>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default CreatorOptions;","import React, { useState, useEffect } from \"react\";\r\nimport qs from \"query-string\";\r\nimport io from \"socket.io-client\";\r\nimport { downloadFeedback } from \"../utils/dowloadFeedback\";\r\nimport { Message } from \"../../types\";\r\nimport { Redirect, RouteComponentProps, StaticContext } from \"react-router\";\r\nimport CreatorOptions from \"./CreatorOptions\";\r\n\r\n// Outside main App so doesn't create a new socket on every \r\n// component re-render.\r\n// const ENDPOINT = process.env.ENDPOINT || \"localhost:5000\";\r\nconst ENDPOINT = process.env.NODE_ENV === \"production\" ?\r\n    \"https://feedback-dysiewicz.herokuapp.com\" :\r\n    \"localhost:5000\";\r\n\r\ninterface ChatBoardLocationState {\r\n    roomCreator: boolean;\r\n}\r\n\r\ninterface PersonalVotedMessage {\r\n    messageId: string;\r\n    personalVotes: number;\r\n}\r\n\r\nconst NUM_VOTES = 3;\r\n\r\nconst ChatBoard: React.FC<RouteComponentProps<any, StaticContext, ChatBoardLocationState>> = (props: RouteComponentProps<any, StaticContext, ChatBoardLocationState>): JSX.Element => {\r\n\r\n    // Return nothing if not redirected here\r\n    if (props.location.search === \"\") return <div>Please create or join a room</div>;\r\n\r\n    const [messageList, setMessageList] = useState<Message[]>([]);\r\n    const [message, setMessage] = useState<string>(\"\");\r\n    const [boardId, setBoardId] = useState<string>(\"\");\r\n    const [socket, setSocket] = useState<SocketIOClient.Socket>();\r\n    const [didCreateRoom, setDidCreateRoom] = useState<boolean>(false);\r\n    const [redirect, setRedirect] = useState<string>(\"\");\r\n    const [warning, setWarning] = useState<string>();\r\n    const [hideVotes, setHideVotes] = useState<boolean>(true);\r\n    const [votedMessages, setVotedMessages] = useState<PersonalVotedMessage[]>([]);\r\n\r\n    useEffect(() => {\r\n        // Don't run if there's no search param for the board - here as a safety net from above\r\n        if (props.location.search === \"\") return;\r\n\r\n        // If here from the Redirect or not\r\n        if (props.location.state !== undefined){\r\n            const didCreate = props.location.state.roomCreator;\r\n            setDidCreateRoom(didCreate);\r\n        }\r\n        const newBoardId = qs.parse(props.location.search).board as string;\r\n        setBoardId(newBoardId);\r\n        setSocket(io.connect(ENDPOINT, {query: `board=${newBoardId}`}));\r\n\r\n        return () => {\r\n            if (socket) socket.disconnect();\r\n        };\r\n    }, []);\r\n\r\n    if (!socket) return <div></div>;\r\n\r\n\r\n    socket.on(\"message\", (messageList: Message[]) => {\r\n        setMessageList(messageList);\r\n    });\r\n\r\n    socket.on(\"initial-vote-visibility\", (voteVis: boolean) => {\r\n        console.log(\"VOTE VIS\", voteVis);\r\n        setHideVotes(voteVis);\r\n    });\r\n\r\n    socket.on(\"creator-disconnect\", (message: {msg: string, timeout: number}) => {\r\n        setWarning(message.msg);\r\n        setTimeout(() => {\r\n            socket.close();\r\n            setWarning(\"\");\r\n            setRedirect(\"/\");\r\n        }, message.timeout);\r\n        return;\r\n    });\r\n\r\n    const voteMessage = (message: Message, value: number) => {\r\n        const indexOfVoted = votedMessages.findIndex(msg => msg.messageId === message.id);\r\n        // If not in votedMessages array, add it to it and give it a personal vote of +1/-1\r\n        // Else, update its votes\r\n        if (indexOfVoted === -1){\r\n            setVotedMessages([...votedMessages, {messageId: message.id, personalVotes: value}]);\r\n        } else {\r\n            const votedMessage = votedMessages[indexOfVoted];\r\n            const newVotedMessage = {...votedMessage, personalVotes: votedMessage.personalVotes + value};\r\n            if (Math.abs(newVotedMessage.personalVotes) > NUM_VOTES) return alert(\"Can only vote 3 times per item\");\r\n            const newVotedMessageArray = votedMessages.filter(msg => msg.messageId !== message.id);\r\n            setVotedMessages([...newVotedMessageArray, newVotedMessage]);\r\n        }\r\n        socket.emit(\"upvote\", {message, value});\r\n    };\r\n\r\n    const renderList = () : JSX.Element[] => {\r\n        return messageList.map((message: Message) => {\r\n            const indexOfVoted = votedMessages.findIndex(msg => msg.messageId === message.id);\r\n            const personalVote = indexOfVoted === -1 ? 0 : votedMessages[indexOfVoted].personalVotes;\r\n            return (\r\n                <li key={message.id}>\r\n                    <div style={{display: \"flex\"}}>\r\n                        <p>Message: {message.message} </p>\r\n                        <p>Personal Votes: {personalVote}</p>\r\n                        {!hideVotes && <p>Total Votes: {message.upvotes}</p>}\r\n                        <button onClick={() => voteMessage(message, 1)}>Upvote</button>\r\n                        <button onClick={() => voteMessage(message, -1)}>Downvote</button>\r\n                    </div>\r\n                </li>\r\n            );\r\n        });\r\n    };\r\n\r\n    const toggleHideVotes = () => {\r\n        socket.emit(\"toggle-votes\");\r\n    };\r\n\r\n    socket.on(\"toggle-votes\", () => {\r\n        setHideVotes(!hideVotes);\r\n    });\r\n\r\n    const handleClick = (): void => {\r\n        const user: string = socket.id;\r\n        const newMessage = {user, message, upvotes: 0};\r\n        socket.emit(\"message\", newMessage);\r\n        setMessage(\"\");\r\n        return; \r\n    };\r\n\r\n    if (redirect) return <Redirect to={{pathname: \"/\", state: {message: \"Disconnected due to admin inactivity\"}}} />;\r\n\r\n    return(\r\n        <div>\r\n            {/* <input style={{border: \"none\", fontSize: \"3rem\"}}\r\n                value={title} onChange={(e) => setTitle(e.target.value)} /> */}\r\n            <h1>Anonymous Feedback</h1>\r\n            <h2>RoomID: {boardId}</h2>\r\n            {warning && <h2 style={{color: \"red\"}}>{warning}</h2>}\r\n            <ul>\r\n                {renderList()}\r\n            </ul>\r\n            <button onClick={() => downloadFeedback(messageList)}>Download Feedback</button>\r\n            <input value={message} placeholder=\"Write a message\" onChange={(e) => setMessage(e.target.value)} />\r\n            <button onClick={() => handleClick()}>Submit Message</button>\r\n            <p><strong>3 Votes Per Item</strong></p>\r\n            {didCreateRoom && <CreatorOptions socket={socket} boardId={boardId} toggleHideVotes={toggleHideVotes}/>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatBoard;","import { Message } from \"../../types\";\r\n\r\nexport const downloadFeedback = (messageList: Message[]): void => {\r\n    let csvContent = \"data:text/csv;charset=utf-8,\";\r\n    const keys = Object.keys(messageList[0]);\r\n    keys.forEach(key => csvContent += `${key},`);\r\n    csvContent += \"\\n\";\r\n    messageList.forEach(message => {\r\n        keys.forEach(key => {\r\n            csvContent += `${message[key]},`;\r\n        });\r\n        csvContent += \"\\n\";\r\n    });\r\n\r\n    const encodedUri = encodeURI(csvContent);\r\n    \r\n    // Need hidden <a> to download as a CSV - perhaps a more React way of doing this\r\n    const link = document.createElement(\"a\");\r\n    link.setAttribute(\"href\", encodedUri);\r\n    link.setAttribute(\"download\", \"feedback.csv\");\r\n    link.setAttribute(\"id\", \"feedback-download-temp\");\r\n    document.body.appendChild(link);\r\n\r\n    // Downloads the file and removes the node afterwards\r\n    link.click();\r\n    document.getElementById(\"feedback-download-temp\")?.remove();\r\n    return;\r\n\r\n};","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n// import ChatBoard from \"./components/ChatBoard\";\r\n\r\nimport SplashScreen from \"./components/SplashScreen\";\r\nimport ChatBoard from \"./components/ChatBoard\";\r\n\r\nconst App: React.FC = () => {\r\n\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <Route exact path=\"/\" component={SplashScreen} />\r\n                <Route path=\"/board\" component={ChatBoard} />\r\n            </Switch>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById(\"root\")\r\n);"],"sourceRoot":""}